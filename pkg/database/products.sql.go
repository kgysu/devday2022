// Code generated by sqlc. DO NOT EDIT.
// source: products.sql

package database

import (
	"context"

	"github.com/jackc/pgtype"
)

const addProduct = `-- name: AddProduct :one
INSERT INTO products (
  name,
  kind
) VALUES (
  $1,
  $2
)
RETURNING id, create_time, name, kind
`

type AddProductParams struct {
	Name string `json:"name"`
	Kind string `json:"kind"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addProduct, arg.Name, arg.Kind)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.Name,
		&i.Kind,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
DELETE FROM products
WHERE id = $1
RETURNING id, create_time, name, kind
`

func (q *Queries) DeleteProduct(ctx context.Context, id pgtype.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.Name,
		&i.Kind,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, create_time, name, kind FROM products
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id pgtype.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.Name,
		&i.Kind,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, create_time, name, kind FROM products ORDER BY create_time
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreateTime,
			&i.Name,
			&i.Kind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
